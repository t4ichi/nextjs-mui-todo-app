/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Todo App API
 * Todo管理アプリケーションのAPI
 * OpenAPI spec version: 1.0.0
 */
import type {
  ApiError,
  UpdateUserProfileRequest,
  User,
  UserProfile
} from '../../schemas';


/**
 * 指定されたユーザーIDのユーザー情報を取得する
 * @summary ユーザー情報取得
 */
export type getUserResponse200 = {
  data: User
  status: 200
}

export type getUserResponse401 = {
  data: ApiError
  status: 401
}
    
export type getUserResponseComposite = getUserResponse200 | getUserResponse401;
    
export type getUserResponse = getUserResponseComposite & {
  headers: Headers;
}

export const getGetUserUrl = (userId: string,) => {


  

  return `https://example.com/users/${userId}`
}

export const getUser = async (userId: string, options?: RequestInit): Promise<getUserResponse> => {
  
  const res = await fetch(getGetUserUrl(userId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getUserResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getUserResponse
}


/**
 * 指定されたユーザーIDのプロフィール情報を取得する
 * @summary ユーザープロフィール取得
 */
export type getUserProfileResponse200 = {
  data: UserProfile
  status: 200
}

export type getUserProfileResponse401 = {
  data: ApiError
  status: 401
}
    
export type getUserProfileResponseComposite = getUserProfileResponse200 | getUserProfileResponse401;
    
export type getUserProfileResponse = getUserProfileResponseComposite & {
  headers: Headers;
}

export const getGetUserProfileUrl = (userId: string,) => {


  

  return `https://example.com/users/${userId}/profile`
}

export const getUserProfile = async (userId: string, options?: RequestInit): Promise<getUserProfileResponse> => {
  
  const res = await fetch(getGetUserProfileUrl(userId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getUserProfileResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getUserProfileResponse
}


/**
 * 指定されたユーザーIDのプロフィール情報を更新する
 * @summary ユーザープロフィール更新
 */
export type updateUserProfileResponse200 = {
  data: UserProfile
  status: 200
}

export type updateUserProfileResponse400 = {
  data: ApiError
  status: 400
}
    
export type updateUserProfileResponseComposite = updateUserProfileResponse200 | updateUserProfileResponse400;
    
export type updateUserProfileResponse = updateUserProfileResponseComposite & {
  headers: Headers;
}

export const getUpdateUserProfileUrl = (userId: string,) => {


  

  return `https://example.com/users/${userId}/profile`
}

export const updateUserProfile = async (userId: string,
    updateUserProfileRequest: UpdateUserProfileRequest, options?: RequestInit): Promise<updateUserProfileResponse> => {
  
  const res = await fetch(getUpdateUserProfileUrl(userId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateUserProfileRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: updateUserProfileResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as updateUserProfileResponse
}


