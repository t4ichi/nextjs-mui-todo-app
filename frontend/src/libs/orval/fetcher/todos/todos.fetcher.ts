/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Todo App API
 * Todo管理アプリケーションのAPI
 * OpenAPI spec version: 1.0.0
 */
import type {
  ApiError,
  CreateTodoRequest,
  GetTodos200,
  GetTodosParams,
  Todo,
  UpdateTodoRequest
} from '../../schemas';


/**
 * ログインユーザーのTodo一覧を取得する
 * @summary Todo一覧取得
 */
export type getTodosResponse200 = {
  data: GetTodos200
  status: 200
}

export type getTodosResponse401 = {
  data: ApiError
  status: 401
}
    
export type getTodosResponseComposite = getTodosResponse200 | getTodosResponse401;
    
export type getTodosResponse = getTodosResponseComposite & {
  headers: Headers;
}

export const getGetTodosUrl = (params?: GetTodosParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://example.com/todos?${stringifiedParams}` : `https://example.com/todos`
}

export const getTodos = async (params?: GetTodosParams, options?: RequestInit): Promise<getTodosResponse> => {
  
  const res = await fetch(getGetTodosUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getTodosResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getTodosResponse
}


/**
 * 新しいTodoを作成する
 * @summary Todo作成
 */
export type createTodoResponse201 = {
  data: Todo
  status: 201
}

export type createTodoResponse400 = {
  data: ApiError
  status: 400
}
    
export type createTodoResponseComposite = createTodoResponse201 | createTodoResponse400;
    
export type createTodoResponse = createTodoResponseComposite & {
  headers: Headers;
}

export const getCreateTodoUrl = () => {


  

  return `https://example.com/todos`
}

export const createTodo = async (createTodoRequest: CreateTodoRequest, options?: RequestInit): Promise<createTodoResponse> => {
  
  const res = await fetch(getCreateTodoUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createTodoRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createTodoResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createTodoResponse
}


/**
 * 指定されたTodoの詳細を取得する
 * @summary Todo詳細取得
 */
export type getTodoResponse200 = {
  data: Todo
  status: 200
}

export type getTodoResponse401 = {
  data: ApiError
  status: 401
}
    
export type getTodoResponseComposite = getTodoResponse200 | getTodoResponse401;
    
export type getTodoResponse = getTodoResponseComposite & {
  headers: Headers;
}

export const getGetTodoUrl = (todoId: string,) => {


  

  return `https://example.com/todos/${todoId}`
}

export const getTodo = async (todoId: string, options?: RequestInit): Promise<getTodoResponse> => {
  
  const res = await fetch(getGetTodoUrl(todoId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getTodoResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getTodoResponse
}


/**
 * 指定されたTodoを更新する
 * @summary Todo更新
 */
export type updateTodoResponse200 = {
  data: Todo
  status: 200
}

export type updateTodoResponse400 = {
  data: ApiError
  status: 400
}
    
export type updateTodoResponseComposite = updateTodoResponse200 | updateTodoResponse400;
    
export type updateTodoResponse = updateTodoResponseComposite & {
  headers: Headers;
}

export const getUpdateTodoUrl = (todoId: string,) => {


  

  return `https://example.com/todos/${todoId}`
}

export const updateTodo = async (todoId: string,
    updateTodoRequest: UpdateTodoRequest, options?: RequestInit): Promise<updateTodoResponse> => {
  
  const res = await fetch(getUpdateTodoUrl(todoId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateTodoRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: updateTodoResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as updateTodoResponse
}


/**
 * 指定されたTodoを削除する
 * @summary Todo削除
 */
export type deleteTodoResponse204 = {
  data: void
  status: 204
}

export type deleteTodoResponse401 = {
  data: ApiError
  status: 401
}
    
export type deleteTodoResponseComposite = deleteTodoResponse204 | deleteTodoResponse401;
    
export type deleteTodoResponse = deleteTodoResponseComposite & {
  headers: Headers;
}

export const getDeleteTodoUrl = (todoId: string,) => {


  

  return `https://example.com/todos/${todoId}`
}

export const deleteTodo = async (todoId: string, options?: RequestInit): Promise<deleteTodoResponse> => {
  
  const res = await fetch(getDeleteTodoUrl(todoId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteTodoResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteTodoResponse
}


